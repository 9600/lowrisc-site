/// Function to clean the unit of any numeric value making possible do math
/// @group   Utilities
/// @access  private
///
/// @param   {number} $value - Value to be cleaned
///
/// @return  {number} - Cleaned value

@function _clean-unit($value) {
  @if type-of($value) == 'number' {
    @return $value / ($value * 0 + 1);
  } @else {
    @warn "#{$value} it's not a number";
  }
}

/// Transforms a `px` value into `em` value.
/// The unit (px) isn't required.
///
/// @group   Utilities
/// @access  public
///
/// @param   {number} $pixels                    - Value to be converted
/// @param   {number} $context [$base-font-size] - Font size used in the convertion
///
/// @return  {number} - Converted value expressed in `em`
/// @require {variable} $font-size-base
///
/// @example scss - Usage
///   .element {
///     height: em(20px);
///   }
///
/// @example scss - Compiled
///   .element {
///     height: 1.25em
///   }

@function em($pixels, $context: $base-font-size){
  @if type-of($pixels) == 'number' {
    @return (_clean-unit($pixels) / _clean-unit($context)) * 1em;
  }  @else {
    @warn '#{$pixels} is not a number';
  }
}

/// Transforms a `px` value into `rem` value.
/// The unit (px) isn't required.
///
/// @group   Utilities
/// @access  public
///
/// @param   {number} $pixels                    - Value to be converted
/// @param   {number} $context [$base-font-size] - Font size used in the convertion
///
/// @return  {number} - Converted value expressed in `rem`
/// @require {variable} $base-font-size
///
/// @example scss - Usage
///   .element {
///     height: rem(20px);
///   }
///
/// @example scss - Compiled
///   .element {
///     height: 1.25rem;
///   }

@function rem($pixels, $context: $base-font-size) {
  @if type-of($pixels) == 'number' {
    @return (_clean-unit($pixels) / _clean-unit($base-font-size)) * 1rem;
  }  @else {
    @warn '#{$pixels} is not a number';
  }
}
